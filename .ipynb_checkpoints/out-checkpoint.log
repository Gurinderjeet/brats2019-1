Namespace(batchSize=6, models_path='/home/localadmin/segthor/models', nEpochs=20, name='local_038', splits=4, threads=12, train_path='/home/localadmin/segthor/data/train_resampled2_2_25_cropped', validation_path='/home/localadmin/segthor/data/train_resampled2_2_25_cropped')
1.0.1.post2
CV 4 splits
[10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33
 34 35 36 37 38 39] [0 1 2 3 4 5 6 7 8 9]
===> Building model
UNet 32
===> Loading datasets
Train data: /home/localadmin/segthor/data/train_resampled2_2_25_cropped
Train ['Patient_11', 'Patient_12', 'Patient_13', 'Patient_14', 'Patient_15', 'Patient_16', 'Patient_17', 'Patient_18', 'Patient_19', 'Patient_20', 'Patient_21', 'Patient_22', 'Patient_23', 'Patient_24', 'Patient_25', 'Patient_26', 'Patient_27', 'Patient_28', 'Patient_29', 'Patient_30', 'Patient_31', 'Patient_32', 'Patient_33', 'Patient_34', 'Patient_35', 'Patient_36', 'Patient_37', 'Patient_38', 'Patient_39', 'Patient_40']
Val ['Patient_01', 'Patient_02', 'Patient_03', 'Patient_04', 'Patient_05', 'Patient_06', 'Patient_07', 'Patient_08', 'Patient_09', 'Patient_10']
['Patient_11', 'Patient_12', 'Patient_13', 'Patient_14', 'Patient_15', 'Patient_16', 'Patient_17', 'Patient_18', 'Patient_19', 'Patient_20', 'Patient_21', 'Patient_22', 'Patient_23', 'Patient_24', 'Patient_25', 'Patient_26', 'Patient_27', 'Patient_28', 'Patient_29', 'Patient_30', 'Patient_31', 'Patient_32', 'Patient_33', 'Patient_34', 'Patient_35', 'Patient_36', 'Patient_37', 'Patient_38', 'Patient_39', 'Patient_40']
===> Building model
===> Training
worker id 5 seed 1342
worker id 4 seed 1341
worker id 0 seed 1337
worker id 2 seed 1339
worker id 3 seed 1340
worker id 7 seed 1344
worker id 6 seed 1343
worker id 1 seed 1338
worker id 8 seed 1345
worker id 9 seed 1346
worker id 11 seed 1348
worker id 10 seed 1347
Traceback (most recent call last):
  File "main.py", line 176, in <module>
    main()
  File "main.py", line 154, in main
    eval_cpu=True
  File "/home/localadmin/segthor/scripts/038/train.py", line 105, in train
    self.state.train_metric, i, self.state.global_step, scheduler)
  File "/home/localadmin/segthor/scripts/038/train.py", line 191, in _train_one_epoch
    output = self.model(data)
  File "/home/localadmin/anaconda2/envs/py36/lib/python3.6/site-packages/torch/nn/modules/module.py", line 489, in __call__
    result = self.forward(*input, **kwargs)
  File "/home/localadmin/anaconda2/envs/py36/lib/python3.6/site-packages/torch/nn/parallel/data_parallel.py", line 143, in forward
    outputs = self.parallel_apply(replicas, inputs, kwargs)
  File "/home/localadmin/anaconda2/envs/py36/lib/python3.6/site-packages/torch/nn/parallel/data_parallel.py", line 153, in parallel_apply
    return parallel_apply(replicas, inputs, kwargs, self.device_ids[:len(replicas)])
  File "/home/localadmin/anaconda2/envs/py36/lib/python3.6/site-packages/torch/nn/parallel/parallel_apply.py", line 83, in parallel_apply
    raise output
  File "/home/localadmin/anaconda2/envs/py36/lib/python3.6/site-packages/torch/nn/parallel/parallel_apply.py", line 59, in _worker
    output = module(*input, **kwargs)
  File "/home/localadmin/anaconda2/envs/py36/lib/python3.6/site-packages/torch/nn/modules/module.py", line 489, in __call__
    result = self.forward(*input, **kwargs)
  File "/home/localadmin/segthor/scripts/038/model.py", line 486, in forward
    conv = self.decoder_convs[i](conv)
  File "/home/localadmin/anaconda2/envs/py36/lib/python3.6/site-packages/torch/nn/modules/module.py", line 489, in __call__
    result = self.forward(*input, **kwargs)
  File "/home/localadmin/anaconda2/envs/py36/lib/python3.6/site-packages/torch/nn/modules/container.py", line 92, in forward
    input = module(input)
  File "/home/localadmin/anaconda2/envs/py36/lib/python3.6/site-packages/torch/nn/modules/module.py", line 489, in __call__
    result = self.forward(*input, **kwargs)
  File "/home/localadmin/segthor/scripts/038/model.py", line 135, in forward
    out = self.se(out)
  File "/home/localadmin/anaconda2/envs/py36/lib/python3.6/site-packages/torch/nn/modules/module.py", line 489, in __call__
    result = self.forward(*input, **kwargs)
  File "/home/localadmin/segthor/scripts/038/model.py", line 52, in forward
    return x * att * y.expand_as(x)
RuntimeError: CUDA out of memory. Tried to allocate 528.00 MiB (GPU 0; 10.92 GiB total capacity; 9.66 GiB already allocated; 453.50 MiB free; 44.43 MiB cached)
